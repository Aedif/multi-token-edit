{"name":"Import/Export Custom Controls","type":"script","scope":"global","author":"UTH9wXZFkTza6igr","img":"icons/svg/d20-highlight.svg","command":"/**\n * Edit Token Magic FX filters on currently selected placeable.\n * Edited filters can be saved as a new preset.\n */\nfunction exportControlsToJSON() {\n  const controls = game.settings.get('multi-token-edit', 'customControls') || {};\n  const filename = `mass-edit-custom-controls.json`;\n  saveDataToFile(JSON.stringify(controls, null, 2), 'text/json', filename);\n}\n\nasync function importControlsJSONDialog() {\n  new Dialog(\n    {\n      title: 'Import Controls',\n      content: await renderTemplate('templates/apps/import-data.html', {\n        entity: 'multi-token-edit',\n        name: 'settings',\n      }),\n      buttons: {\n        import: {\n          icon: '<i class=\"fas fa-file-import\"></i>',\n          label: \"Import\",\n          callback: (html) => {\n            const form = html.find('form')[0];\n            if (!form.data.files.length)\n              return ui.notifications?.error('You did not upload a data file!');\n            readTextFromFile(form.data.files[0]).then((json) => {\n              json = JSON.parse(json);\n              const controls = game.settings.get('multi-token-edit', 'customControls') || {};\n              mergeObject(controls, json);\n              game.settings.set('multi-token-edit', 'customControls', controls);\n              ui.notifications.info('MassEdit Custom Controls have been successfully imported!');\n            });\n          },\n        },\n        no: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: 'Cancel',\n          callback: () => {},\n        },\n      },\n      default: 'import',\n    },\n    {\n      width: 400,\n    }\n  ).render(true);\n}\n\nnew Dialog({\n  title: 'Import/Export MassEdit Custom Controls',\n  content: '',\n  buttons: {\n    import: {\n      label: 'Import',\n      callback: importControlsJSONDialog,\n    },\n    export: {\n      label: 'Export',\n      callback: exportControlsToJSON,\n    },\n  },\n  default: 'import',\n}).render(true);","flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.yvjS5E6nTrtKP59c"},"scene-packer":{"hash":"e96766417aedeacebf5182725a9b0a33a85e1398","sourceId":"Macro.dc8KaRbBRW5dmOZd"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.4","coreVersion":"10.291","createdTime":1669292379514,"modifiedTime":1678275795513,"lastModifiedBy":"UTH9wXZFkTza6igr"},"ownership":{"default":0,"UTH9wXZFkTza6igr":3},"folder":null,"sort":0,"_id":"4pr9VZHl7moFr7uW"}
{"name":"TMFX - Editor","type":"script","scope":"global","author":"UTH9wXZFkTza6igr","img":"icons/svg/d20-highlight.svg","command":"/**\n * Edit Token Magic FX filters on currently selected placeable.\n * Edited filters can be saved as a new preset.\n */\n\nconst controlled = TokenMagic.getControlledPlaceables();\nif (!controlled.length) return;\n\nconst filters = controlled[0].document.getFlag('tokenmagic', 'filters') || [];\nif (!filters.length) return;\n\nlet params = filters.map((f) => {\n  const tmParams = deepClone(f.tmFilters.tmParams);\n  ['placeableId', 'placeableType', 'filterInternalId', 'filterOwner', 'updateId'].forEach(\n    (k) => delete tmParams[k]\n  );\n  return tmParams;\n});\nif (!params.length) return;\n\nasync function savePreset() {\n  let content = `<label>Macro</label>\n  <textarea style=\"width:100%; height: 300px;\" readonly>let params = ${JSON.stringify(\n    params,\n    null,\n    2\n  )};\n\nawait TokenMagic.addUpdateFiltersOnSelected(params);</textarea>\n  <label>Preset Name</label><input class=\"presetName\" type=\"text\" value=\"${\n    params[0].filterId ?? params[0].filterType\n  }\"/>\n  <hr><label>Library</label> <select class=\"library\"><option value=\"tmfx-main\">MAIN</option><option value=\"tmfx-template\">TEMPLATE</option></select>\n  `;\n  new Dialog({\n    title: `Params`,\n    content: content,\n    buttons: {\n      save: {\n        label: 'Save As Preset',\n        callback: async (html) => {\n          const name = html.find('.presetName').val();\n          const library = html.find('.library').val();\n          if (TokenMagic.getPreset({ name, library })) {\n            TokenMagic.deletePreset({ name, library });\n          }\n          TokenMagic.addPreset({ name, library }, params);\n        },\n      },\n    },\n  }).render(true);\n}\n\nasync function promptParamChoice(params) {\n  return new Promise((resolve, reject) => {\n    const buttons = {};\n    for (let i = 0; i < params.length; i++) {\n      let label = params[i].filterType ?? params[i].filterId;\n      if (label in buttons) label = label + ' ' + i;\n      buttons[label] = {\n        label: params[i].filterId + ' {' + params[i].filterType + '}',\n        callback: () => {\n          resolve(i);\n        },\n      };\n    }\n\n    let dialog;\n    dialog = new Dialog({\n      title: 'TMFX Filter Editor',\n      content:\n        '<button class=\"savePreset\">Save as Preset</button><p></p><h2 style=\"text-align: center;\">Edit Filter</h2>',\n      buttons,\n      render: (html) => {\n        html.find('.dialog-button').attr('title', 'Right-click to remove filter.');\n        html.find('.dialog-button').contextmenu((event) => {\n          dialog.close();\n          const index = $(event.target).index();\n          TokenMagic.deleteFiltersOnSelected(params[index].filterId);\n          params.splice(index, 1);\n          configureParam();\n        });\n        html.find('.savePreset').click((event) => {\n          savePreset();\n          dialog.close();\n        });\n        html.find('.dialog-button').parent().css('display', 'block');\n      },\n      close: () => resolve(-1),\n    });\n    dialog.render(true);\n  });\n}\n\nasync function configureParam() {\n  if (!params || !params.length) return;\n  let i = await promptParamChoice(params);\n  if (i < 0) return;\n  let param = params[i];\n\n  if (param)\n    game.modules.get('multi-token-edit').api.showGenericForm(param, param.filterType ?? 'TMFX', {\n      callback: async (obj) => configureParam(),\n      inputChangeCallback: (selected) => {\n        mergeObject(param, selected, { inplace: true });\n        TokenMagic.addUpdateFiltersOnSelected(deepClone(params));\n      },\n    });\n}\n\nconfigureParam();","flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.yvjS5E6nTrtKP59c"},"scene-packer":{"hash":"f6ffb59dd313cf527658a9db25d75dd64161dc49","sourceId":"Macro.dc8KaRbBRW5dmOZd"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":1669292379514,"modifiedTime":1683223008198,"lastModifiedBy":"UTH9wXZFkTza6igr"},"ownership":{"default":0,"UTH9wXZFkTza6igr":3},"folder":null,"sort":0,"_id":"7iKsCazMU8lnEs4c"}
{"name":"Color Replace Vision Mode","type":"script","scope":"global","author":"UTH9wXZFkTza6igr","img":"icons/svg/d20-highlight.svg","command":"/**\n * Configures a Color Replace vision mode for the currently selected token.\n * Once the changes are applied a world script is generated so that the vision\n * mode can be used outside this macro.\n */\n\nconst data = {\n  'Colors->': 16746496,\n  '<-Colors': 16711854,\n  hue: 0,\n  saturation: 0,\n  brightness: 0,\n  mixHue: false,\n  mixSaturation: true,\n  mixBrightness: false,\n  factor: 1.37,\n};\n\nasync function updateFilter() {\n  let lowerThanColor = new Color(data['Colors->']).hsv[0];\n  let higherThanColor = new Color(data['<-Colors']).hsv[0];\n\n  const PREC = 6;\n\n  let diff = lowerThanColor - higherThanColor;\n  if (lowerThanColor < higherThanColor) {\n    diff = 1.0 - higherThanColor + lowerThanColor;\n  }\n\n  let halfDiff = diff / 2.0;\n  let mid = (higherThanColor + halfDiff) % 1.0;\n\n  VisualEffectsMaskingFilter.POST_PROCESS_TECHNIQUES['COLOR_REPLACE'] = {\n    id: 'COLOR_REPLACE',\n    glsl: `\n  \n     vec3 c = finalColor.rgb;\n  \n     vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n     vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n     vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n  \n     float d = q.x - min(q.w, q.y);\n     float e = 1.0e-10;\n     vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\n     float distance = min( abs( ${mid.toFixed(PREC)} - hsv.x), abs( 1.0 - ${mid.toFixed(\n      PREC\n    )} + hsv.x) );\n     float percent = 1.0 - distance / ${halfDiff.toFixed(PREC)};\n\n     if(percent > 0.0 && hsv.y > 0.05 && hsv.z > 0.05) {\n      ${data.factor != 1.0 ? `percent = min(percent * ${data.factor.toFixed(2)}, 1.0);` : ''}\n      vec3 target =  vec3(${data.hue.toFixed(PREC)}, ${data.saturation.toFixed(\n      PREC\n    )}, ${data.brightness.toFixed(PREC)});\n  \n      ${data.mixHue ? '' : 'target.x = hsv.x;\\n'}${\n      data.mixSaturation ? '' : 'target.y = hsv.y;\\n'\n    }${data.mixBrightness ? '' : 'target.z = hsv.z;\\n'}\n      hsv = mix(hsv, target, percent);\n      vec4 Kl = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n      vec3 L = abs(fract(hsv.rrr + Kl.xyz) * 6.0 - Kl.www);\n      finalColor.rgb = hsv.b * mix(Kl.xxx, clamp(L - Kl.xxx, 0.0, 1.0), hsv.g);\n     }\n     `,\n  };\n\n  console.log(VisualEffectsMaskingFilter.POST_PROCESS_TECHNIQUES['COLOR_REPLACE'].glsl);\n\n  CONFIG.Canvas.visionModes['color_replace'] = new VisionMode({\n    id: 'color_replace',\n    label: 'Color Replace',\n    lighting: {\n      background: {\n        postProcessingModes: ['COLOR_REPLACE'],\n      },\n      illumination: {\n        postProcessingModes: ['COLOR_REPLACE'],\n      },\n      coloration: {\n        postProcessingModes: ['COLOR_REPLACE'],\n      },\n    },\n    vision: {\n      defaults: { attenuation: 0, contrast: 0, saturation: 0, brightness: 0 },\n    },\n  });\n\n  await _token.document.update({ 'sight.visionMode': 'basic' });\n  _token.document.update({ 'sight.visionMode': 'color_replace' });\n}\n\nfunction displayWorldScript() {\n  let content = `\n  <textarea style=\"width:100%; height: 300px;\" readonly>\n  Hooks.on('init', () => {\n    VisualEffectsMaskingFilter.POST_PROCESS_TECHNIQUES['COLOR_REPLACE'] = {\n      id: 'COLOR_REPLACE',\n      glsl: \\`\n        ${VisualEffectsMaskingFilter.POST_PROCESS_TECHNIQUES['COLOR_REPLACE'].glsl}\n      \\`,\n    };\n  \n    CONFIG.Canvas.visionModes['color_replace'] = new VisionMode({\n      id: 'color_replace',\n      label: 'Color Replace',\n      lighting: {\n        background: {\n          postProcessingModes: ['COLOR_REPLACE'],\n        },\n        illumination: {\n          postProcessingModes: ['COLOR_REPLACE'],\n        },\n        coloration: {\n          postProcessingModes: ['COLOR_REPLACE'],\n        },\n      },\n      vision: {\n        defaults: { attenuation: 0, contrast: 0, saturation: 0, brightness: 0 },\n      },\n    });\n  });\n  </textarea>\n  `;\n  new Dialog({\n    title: `World Script`,\n    content: content,\n    buttons: {\n      close: {\n        label: 'Close',\n      },\n    },\n  }).render(true);\n}\n\nconst CUSTOM_CONTROLS = {\n  VISION_MODE: {\n    hue: {\n      range: true,\n      min: '0',\n      max: '1',\n      step: '0.01',\n    },\n    saturation: {\n      range: true,\n      min: '0',\n      max: '1',\n      step: '0.01',\n    },\n    brightness: {\n      range: true,\n      min: '0',\n      max: '1',\n      step: '0.01',\n    },\n    min: {\n      range: true,\n      min: '0',\n      max: '1',\n      step: '0.01',\n    },\n    exp: {\n      range: true,\n      min: '1.4',\n      max: '25',\n      step: '0.1',\n    },\n    factor: {\n      range: true,\n      min: '1',\n      max: '3',\n      step: '0.01',\n    },\n  },\n};\n\ngame.modules.get('multi-token-edit').api.showGenericForm(data, 'VISION_MODE', {\n  customControls: CUSTOM_CONTROLS,\n  callback: async (obj) => displayWorldScript(),\n  inputChangeCallback: (selected) => {\n    mergeObject(data, selected, { inplace: true });\n    updateFilter();\n  },\n});","flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.VRq1Z5A3dxB4fP0w"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.291","createdTime":1669258178543,"modifiedTime":1673001516733,"lastModifiedBy":"UTH9wXZFkTza6igr"},"folder":null,"sort":0,"ownership":{"default":0,"UTH9wXZFkTza6igr":3},"_id":"AgojUTBzVbolX8Il"}
{"name":"TMFX - Apply Preset","type":"script","scope":"global","author":"UTH9wXZFkTza6igr","img":"icons/svg/d20-highlight.svg","command":"// Search and apply Token Magic FX preset\n\nlet libraries = {};\nlet pst = game.settings.get('tokenmagic', 'presets') || [];\npst.forEach((preset) => {\n  if (!(preset.library in libraries)) libraries[preset.library] = [];\n  else libraries[preset.library].push(preset);\n});\n\nlet lists = '';\nObject.entries(libraries).forEach((entry) => {\n  const [library, presets] = entry;\n  let libList = '<datalist id=\"' + library + '\">';\n  presets.forEach((preset) => (libList += `<option value=\"${preset.name}\">`));\n  lists += libList + '</datalist>';\n});\n\nlet content = '<label>Library</label> <select id=\"library\" style=\"width: 100%;\">';\nObject.keys(libraries).forEach(\n  (library) =>\n    (content += `<option value=\"${library}\" ${\n      library === 'tmfx-main' ? 'selected=\"\"' : ''\n    }>${library}</option>`)\n);\ncontent += '</select>';\ncontent += '<hr><label>Preset</label> <input class=\"preset\" list=\"tmfx-main\" style=\"width: 100%;\">';\ncontent = lists + content;\n\nnew Dialog({\n  title: `Apply TMFX Preset`,\n  content: content,\n  buttons: {\n    save: {\n      label: 'Apply on Selected',\n      callback: async (html) => {\n        const name = html.find('.preset').val();\n        const library = html.find('.preset').attr('list');\n        let preset = TokenMagic.getPreset({ name, library });\n        TokenMagic.addUpdateFiltersOnSelected(preset);\n      },\n    },\n  },\n  render: (html) => {\n    html\n      .find('#library')\n      .on('change', (event) => html.find('.preset').attr('list', event.target.value));\n  },\n}).render(true);","flags":{"advanced-macros":{"runAsGM":false,"runForEveryone":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.VRq1Z5A3dxB4fP0w"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":1669258178543,"modifiedTime":1682956873734,"lastModifiedBy":"UTH9wXZFkTza6igr"},"folder":null,"sort":0,"ownership":{"default":0,"UTH9wXZFkTza6igr":3},"_id":"xwBXNvSIBEaYz0iT"}
